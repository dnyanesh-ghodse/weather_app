{"version":3,"sources":["components/Date/Date.js","components/Loading/Loading.js","components/Weather/WeatherInfo.js","components/chart/Chart.js","components/Weather/WeatherMain.js","App.js","index.js","components/Weather/WeatherMain.module.css","components/Loading/Loading.module.css","components/chart/Chart.module.css","components/Weather/WeatherInfo.module.css"],"names":["DateNow","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","dateBuilder","Date","Loading","className","classes","loading","WeatherInfo","props","rise","sunrise","set","sunset","SunsetDate","SunriseDate","weatherInfo","humi","icon","windSpeed","humidity","pressure","sun","getHours","getMinutes","getSeconds","Chart","useState","forecast","setForecast","setLoading","url","useEffect","fetch","then","res","json","data","console","log","forecastDays","list","newDay","forEach","dateN","dt","push","labels","datasets","label","backgroundColor","borderColor","main","temp_max","temp_min","chart","WeatherApp","query","setQuery","isLoading","weather","setWeather","showMore","setShowMore","showGraph","setShowGraph","fetchWeatherData","container","search_box","type","placeholder","onChange","e","target","value","onKeyPress","key","dateLocation","location","name","sys","country","weatherbox","temp","Math","round","desc","description","highLow","high","low","wind","speed","btn","onClick","graphBtn","city","App","ifConnetcted","window","navigator","onLine","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.c4fd815c.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction DateNow() {\r\n    const dateBuilder = (d) => {\r\n        let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\r\n        let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\r\n\r\n        let day = days[d.getDay()];\r\n        let date = d.getDate();\r\n        let month = months[d.getMonth()];\r\n        let year = d.getFullYear();\r\n\r\n    return `${day} ${date} ${month} ${year}`\r\n  }\r\n\r\n    return (\r\n        <div>\r\n            {dateBuilder(new Date())}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DateNow;\r\n","import React from 'react';\r\nimport classes from \"./Loading.module.css\";\r\n\r\nfunction Loading() {\r\n    return (\r\n        <div className={classes.loading}>\r\n            {/* <img src={Spinner} alt=\"loading\"/> */}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Loading\r\n","import React from 'react';\r\nimport classes from \"./WeatherInfo.module.css\";\r\nimport { FiSunrise,FiSunset } from 'react-icons/fi'\r\nimport {WiHumidity} from \"react-icons/wi\"\r\nimport {GiPaperWindmill} from \"react-icons/gi\";\r\nimport {CgCompressV} from \"react-icons/cg\";\r\n\r\n\r\nfunction WeatherInfo(props) {\r\n    //converting seconds into date\r\n    let rise = props.sunrise;\r\n    let set = props.sunset;\r\n    let SunsetDate = new Date(set * 1000)\r\n    let SunriseDate = new Date(rise * 1000)\r\n    return (\r\n        <div className={classes.weatherInfo}>\r\n            <div className={classes.humi}>\r\n                <li className={classes.icon}> <GiPaperWindmill /> Wind Speed : {props.windSpeed} m/s</li>\r\n                <li className={classes.icon}> <WiHumidity/> Humidity : {props.humidity} g.kg<sup>-1</sup></li>\r\n                <li className={classes.icon}> <CgCompressV /> Pressure : {props.pressure} Pa</li>\r\n            </div>\r\n            <div className={classes.sun}>\r\n                <li  className={classes.icon}> <FiSunrise/> Sunrise : {`${SunriseDate.getHours()} : ${SunriseDate.getMinutes()} : ${SunriseDate.getSeconds()}`}</li>\r\n                <li className={classes.icon}> <FiSunset /> Sunset : {`${SunsetDate.getHours()} : ${SunsetDate.getMinutes()} : ${SunsetDate.getSeconds()}`}</li>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default WeatherInfo;\r\n","import React,{useState,useEffect} from 'react';\r\nimport classes from \"./Chart.module.css\"\r\nimport {Line} from \"react-chartjs-2\";\r\n\r\nfunction Chart(props) {\r\n    const [forecast, setForecast] = useState({})\r\n    const [loading, setLoading] = useState(true)\r\n\r\n    const city = \"bangalore\";\r\n    const API_KEY = \"f32cfa0133a992d042027732e48eae99\"\r\n    const url = `https://api.openweathermap.org/data/2.5/forecast?q=${city}&appid=${API_KEY}`\r\n\r\n\r\n    useEffect(() => {\r\n        fetch(url)\r\n        .then(res => res.json())\r\n        .then(data => {\r\n            setForecast(data)\r\n            setLoading(false)\r\n            console.log(data)\r\n        })\r\n    }, [])\r\n\r\n    if(loading){\r\n        return <h1>Loading</h1>\r\n    }\r\n\r\n\r\n    const forecastDays = [forecast.list[0],forecast.list[10],forecast.list[20],forecast.list[30],forecast.list[39]]\r\n    const newDay = []\r\n\r\n        forecastDays.forEach(d => {\r\n            const dateN = new Date(d.dt * 1000).getDate();\r\n            newDay.push(dateN)\r\n        })\r\n\r\n        console.log(newDay);\r\n       \r\n        \r\n        const labels = [\r\n            newDay[0]+\" / 2021\",\r\n            newDay[1]+\" / 2021\" ,\r\n            newDay[2]+\" / 2021\",\r\n            newDay[3]+\" / 2021\",\r\n            newDay[4]+\" / 2021\",\r\n        ];\r\n    const data = {\r\n    labels: labels,\r\n    datasets: [{\r\n        label: 'High',\r\n        backgroundColor: 'rgb(255, 99, 132)',\r\n        borderColor: 'rgb(255, 99, 132)',\r\n        data: [  \r\n            forecastDays[0].main.temp_max - 273,\r\n            forecastDays[1].main.temp_max - 273, \r\n            forecastDays[2].main.temp_max - 273, \r\n            forecastDays[3].main.temp_max - 273, \r\n            forecastDays[4].main.temp_max- 273\r\n             ],\r\n        \r\n    },{ label: \"Low\",\r\n        borderColor: \"#aba\",\r\n        backgroundColor: \"#123\",\r\n        data: [\r\n            forecastDays[0].main.temp_min - 273,\r\n            forecastDays[1].main.temp_min - 273, \r\n            forecastDays[2].main.temp_min - 273, \r\n            forecastDays[3].main.temp_min - 273, \r\n            forecastDays[4].main.temp_min- 273]}]\r\n    };\r\n\r\n    return (\r\n        <div className={classes.chart}>\r\n            <Line data={data}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chart\r\n","import React,{useState,useEffect} from 'react'\r\nimport classes from \"./WeatherMain.module.css\"\r\nimport DateNow from \"../Date/Date\";\r\nimport Loading from '../Loading/Loading';\r\nimport MoreInfo from \"./WeatherInfo\"\r\nimport Chart from '../chart/Chart';\r\n\r\n\r\n  const API_KEY = \"f32cfa0133a992d042027732e48eae99\";\r\n\r\nfunction WeatherApp() {\r\n    const [query, setQuery] = useState(\"bangalore\");\r\n    const [isLoading, setLoading] = useState(false);\r\n    const [weather, setWeather] = useState({});\r\n    const [showMore, setShowMore] = useState(false);\r\n    const [showGraph, setShowGraph] = useState(false);\r\n\r\n    const fetchWeatherData = () => {\r\n          fetch(`https://api.openweathermap.org/data/2.5/weather?q=${query}&appid=${API_KEY}`)\r\n              .then(res => res.json())\r\n              .then(data => {\r\n                  setQuery('');\r\n                  console.log(data);\r\n                  setWeather(data);\r\n                  setLoading(false);\r\n              });\r\n    }\r\n\r\n    const search = e => {\r\n        if(e.key === \"Enter\") {\r\n            fetchWeatherData()\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetchWeatherData()\r\n    },[])\r\n\r\n    if(isLoading){\r\n      return <Loading/>\r\n    }\r\n\r\n   const handleShowMore = () => {\r\n       setShowMore(!showMore)\r\n   }\r\n\r\n  const handleShowGraph = () => {\r\n       setShowGraph(!showGraph)\r\n  }\r\n  \r\n\r\n    return (\r\n    <div className={classes.container}>\r\n        <main className={classes.main}>\r\n          <div className={classes.search_box}>\r\n            <input \r\n            type=\"text\" \r\n            className=\"search-bar\" \r\n            placeholder=\"search\" \r\n            onChange={e => setQuery(e.target.value)}\r\n            onKeyPress={search}\r\n            /> \r\n          </div>\r\n          {(typeof weather.main != \"undefined\") ? (<div>\r\n            <article>\r\n            <div className={classes.dateLocation}>\r\n              <div className={classes.location}>\r\n                  {weather.name},{weather.sys.country}\r\n              </div>\r\n              <div className={classes.date}>\r\n                  <DateNow/>\r\n              </div>\r\n            </div>\r\n            <div className={classes.weatherbox}>\r\n                  <div className={classes.temp}>\r\n                      {Math.round(weather.main.temp - 273.15)}°c\r\n                  </div>\r\n                  <div className={classes.desc}>\r\n                      <h5>{weather.weather[0].main}</h5>\r\n                      <p>{weather.weather[0].description}</p>\r\n                  </div>\r\n            </div>\r\n            </article>\r\n            <div className={classes.highLow}>\r\n                  <div className={classes.high}>Todays's High : {Math.round(weather.main.temp_max - 273.15)}°c</div>\r\n                  <div className={classes.low}>Todays's Low : {Math.round(weather.main.temp_min - 273.15)}°c</div>\r\n              </div>\r\n            {showMore ? <MoreInfo \r\n                    windSpeed={weather.wind.speed} \r\n                    pressure={weather.main.pressure} \r\n                    sunrise={weather.sys.sunrise} \r\n                    sunset={weather.sys.sunset}\r\n                    humidity={weather.main.humidity}\r\n            /> : null}\r\n        </div>) : ('')}\r\n        <div className={classes.btn}>\r\n          <button onClick={handleShowMore}>{showMore ? \"Hide Details\" : \"Show Details\"}</button>\r\n          <button className={classes.graphBtn} onClick={handleShowGraph}>{showGraph ? \"Hide Graph\" : \"Show Graph\"}</button>\r\n        </div>\r\n        {showGraph ? <Chart city={query}/> : null}\r\n        </main>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default WeatherApp\r\n","import \"./App.css\";\nimport WeatherApp from \"./components/Weather/WeatherMain\";\n\nfunction App() {\n\n  const ifConnetcted = window.navigator.onLine;\n\n  return (<>\n        <div className={ifConnetcted ? \"connect\" : \"notConneted\"}></div>\n    <WeatherApp />\n  </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"WeatherMain_container__1_oOD\",\"main\":\"WeatherMain_main__XhKKJ\",\"search_box\":\"WeatherMain_search_box__3XCzd\",\"weatherbox\":\"WeatherMain_weatherbox__3qbbA\",\"location\":\"WeatherMain_location__CbbpP\",\"date\":\"WeatherMain_date__Wpz22\",\"temp\":\"WeatherMain_temp__-p9rC\",\"desc\":\"WeatherMain_desc__7t6eA\",\"weather\":\"WeatherMain_weather__KOP60\",\"highLow\":\"WeatherMain_highLow__yiU-Q\",\"high\":\"WeatherMain_high__2pbzP\",\"low\":\"WeatherMain_low__1j35Z\",\"cloud\":\"WeatherMain_cloud__2ljL8\",\"btn\":\"WeatherMain_btn__3QeJP\",\"graphBtn\":\"WeatherMain_graphBtn__3uZq7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loading\":\"Loading_loading__3O3za\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"chart\":\"Chart_chart__2xHcz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"weatherInfo\":\"WeatherInfo_weatherInfo__35PY6\",\"icon\":\"WeatherInfo_icon__3vXAU\"};"],"sourceRoot":""}